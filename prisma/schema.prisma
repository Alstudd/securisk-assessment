generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model QuestionBank {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  topic     String
  subtopics Subtopic[]
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]

  @@map("question_banks")
}

model Quiz {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  name           String
  accessEmails   String[]       @default([])
  questionCount  Int
  questionBankId String         @db.ObjectId
  questionBank   QuestionBank   @relation(fields: [questionBankId], references: [id], onDelete: Cascade)
  questions      QuizQuestion[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Game           Game[]
  timer          Int?

  @@map("quizzes")
}

model Subtopic {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  questionSets   QuestionSet[]
  questionBankId String         @db.ObjectId
  questionBank   QuestionBank   @relation(fields: [questionBankId], references: [id], onDelete: Cascade)
  QuizQuestion   QuizQuestion[]

  @@map("subtopics")
}

model QuestionSet {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quest      String
  options    Json
  scenario   String
  subtopicId String   @db.ObjectId
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@map("question_sets")
}

model QuizQuestion {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  quizId     String       @db.ObjectId
  quiz       Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quest      String
  options    Json
  scenario   String
  subtopic   Subtopic     @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  subtopicId String       @db.ObjectId
  GameAnswer GameAnswer[]

  @@map("quiz_questions")
}

model Game {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  quizId      String       @db.ObjectId
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     GameAnswer[]
  timeStarted DateTime     @default(now())
  timeEnded   DateTime?
  mainScore   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("games")
}

model GameAnswer {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  gameId           String       @db.ObjectId
  game             Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  questionId       String       @db.ObjectId
  question         QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   Json
  timeTookToAnswer Int?

  @@map("game_answers")
}
